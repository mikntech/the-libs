name: deploy_mikntech_michaelnusair

on:
  push:
    branches:
      - main

permissions:
  actions: read
  contents: read

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      dep_hash: ${{ steps.dep_hash.outputs.DEP_HASH }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          ssh-key: ${{ secrets.MIK_ACTIONS_DEPLOY_KEY }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.0'


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.MIK_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.MIK_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1



      - name: Extract version from package.json
        run: |
          echo "VERSION=$(cat package.json | jq -r .version)" >> $GITHUB_ENV

      - name: Calculate dependencies hash
        id: dep_hash
        run: |
          jq 'del(.version)' package.json > temp_package.json
          echo "DEP_HASH=$(cat temp_package.json | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV
          rm temp_package.json

      - name: Check if base image exists
        id: check_base_image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IMAGE="${ECR_REGISTRY}/mikmn/base:${DEP_HASH}"
          if docker manifest inspect $IMAGE > /dev/null 2>&1; then
            echo "BASE_IMAGE_EXISTS=true" >> $GITHUB_ENV
            echo "Image $IMAGE exists."
          else
            echo "BASE_IMAGE_EXISTS=false" >> $GITHUB_ENV
            echo "Image $IMAGE does not exist."
          fi

      - name: Build, tag, and push base image to Amazon ECR
        if: env.BASE_IMAGE_EXISTS == 'false'
        env:
          DOCKER_BUILDKIT: 1
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/mikmn/base:${DEP_HASH} -f ./Dockerfile .
          docker push $ECR_REGISTRY/mikmn/base:${DEP_HASH}
  

  build_mikmikntech-michaelnusair:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.MIK_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.MIK_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Extract version from package.json
        run: |
          echo "VERSION=$(cat package.json | jq -r .version)" >> $GITHUB_ENV

      - name: Calculate dependencies hash
        id: dep_hash
        run: |
          jq 'del(.version)' package.json > temp_package.json
          echo "DEP_HASH=$(cat temp_package.json | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV
          rm temp_package.json

      - name: Build, tag, and push mikmikntech-michaelnusair image to Amazon ECR
        env:
          DOCKER_BUILDKIT: 1
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          docker build --build-arg DEP_HASH=${DEP_HASH} -t $ECR_REGISTRY/mikmn/mikntech-michaelnusair:$VERSION -f ./apps/mikntech-michaelnusair/Dockerfile .
          docker push $ECR_REGISTRY/mikmn/mikntech-michaelnusair:$VERSION
  
  

  deploy_to_ecs:
    needs: [ prepare, build_mikmikntech-michaelnusair ]
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.MIK_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.MIK_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.0'

      - name: Extract version from package.json
        run: |
          echo "VERSION=$(cat package.json | jq -r .version)" >> $GITHUB_ENV





      - name: Fetch current mikmikntech-michaelnusair task definition
        id: current-task-def-mikmikntech-michaelnusair
        run: |
          aws ecs describe-task-definition --task-definition mikmikntech-michaelnusair > mik-current-mikmikntech-michaelnusair-task-def.json

      - name: Update task definition for mikmikntech-michaelnusair
        run: |
          jq --arg image_tag "$VERSION" --arg ecr_registry "${{ steps.login-ecr.outputs.registry }}" '.taskDefinition.containerDefinitions[0].image = $ecr_registry + "/mikmn/mikntech-michaelnusair:" + $image_tag' mik-current-mikmikntech-michaelnusair-task-def.json > mik-intermediate-mikmikntech-michaelnusair-task-def.json
          jq '.taskDefinition | del(.taskDefinitionArn, .status, .revision, .registeredAt, .registeredBy, .requiresAttributes, .compatibilities)' mik-intermediate-mikmikntech-michaelnusair-task-def.json > mik-final-mikmikntech-michaelnusair-task-def.json

      - name: Register task definition for mikmikntech-michaelnusair
        id: register-task-def-mikmikntech-michaelnusair
        run: |
          MIK_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://mik-final-mikmikntech-michaelnusair-task-def.json | jq -r '.taskDefinition.taskDefinitionArn')
          echo "MIK_TASK_DEF_ARN_MIKNTECH-MICHAELNUSAIR=$MIK_TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Update ECS Service for mikmikntech-michaelnusair
        run: |
          aws ecs update-service --cluster mikprod --service mikmikntech-michaelnusair --task-definition ${{ env.MIK_TASK_DEF_ARN_MIKNTECH-MICHAELNUSAIR }} 

